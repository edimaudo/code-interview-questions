faire test

customer statistics
This is one of the tasks from "Customer Statistics" Task Group.

You are given a data.csv file in the /root/customers/ directory containing information about your customers.

It has the following columns:

ID,NAME,CITY,COUNTRY,CPERSON,EMPLCNT,CONTRCNT,CONTRCOST
where

ID: Unique id of the customer
NAME: Official customer company name
CITY: Location city name
COUNTRY: Location country name
CPERSON: Email of the customer company contact person
EMPLCNT: Customer company employees number
CONTRCNT: Number of contracts signed with the customer
CONTRCOST: Total amount of money paid by customer (float in format dollars.cents)
Read and analyze the data.csv file, and output the answer to the following question:

How many customers are in each city?
The answer should be formatted as:

Customers by city:
<CITY>: <number>
<CITY>: <number>
...
The answers must be sorted by CITY in ascending order. If there are several cities that are tied for having the most customers' contracts, print the lexicographically smaller one first.

Example

For the following data.csv

ID,NAME,CITY,COUNTRY,CPERSON,EMPLCNT,CONTRCNT,CONTRCOST
00000001,Breadpot,Sydney,Australia,Sam.Keng@info.com,250,48,1024.00
00000002,Hoviz,Manchester,UK,harry.ham@hoviz.com,150,7,900.00
00000003,Hoviz,London,UK,hamlet.host@hoviz.com,1500,12800,10510.50
00000004,Grenns,London,UK,grenns@grenns.com,200,12800,128.30
00000005,Magnolia,Chicago,USA,man@info.com,1024,25600,512000.00
00000006,Dozen,San Francisco,USA,dozen@dozen.com,1000,5,1000.20
00000007,Sun,San Francisco,USA,sunny@sun.com,2000,2,10000.01
the output for this should be:

Customers by city:
Chicago: 1
London: 2
Manchester: 1
San Francisco: 2
Sydney: 1



clockdigit time
Given start time and finish time, find how many times each digit appeared on the clock during the period from start time to finish time inclusive.

Note that the time on clocks is shown as follows: HH:MM:SS, so leading zeros are also supposed to be counted.

Example

For startTime = [13, 24, 5] and finishTime = [13, 24, 20], the output should be
clockDigitsCount(startTime, finishTime) = [7, 27, 18, 17, 17, 2, 2, 2, 2, 2].

The time on clocks during the given period will be shown as follows:

13:24:05
13:24:06
13:24:07
13:24:08
13:24:09
13:24:10
13:24:11
13:24:12
13:24:13
13:24:14
13:24:15
13:24:16
13:24:17
13:24:18
13:24:19
13:24:20
You can calculate the number of each digit yourself and double-check that it equals to the corresponding element of the output array.

For startTime = [23, 59, 58] and finishTime = [23, 59, 59], the output should be
clockDigitsCount(startTime, finishTime) = [0, 0, 2, 2, 0, 4, 0, 0, 1, 3].

Input/Output

[execution time limit] 4 seconds (py3)

[input] array.integer startTime

Guaranteed constraints:
startTime.length = 3,
0 ≤ startTime[0] ≤ 23,
0 ≤ startTime[1] ≤ 59,
0 ≤ startTime[2] ≤ 59.

[input] array.integer finishTime

Time is represented as follows [hours, minutes, seconds]. Time on the clocks is shown as follows: HH:MM:SS. It is supposed that both time stamps refer to the same day.

Guaranteed constraints:
finishTime.length = 3,
startTime[0] ≤ finishTime[0] ≤ 23,
0 ≤ finishTime[1] ≤ 59,
0 ≤ finishTime[2] ≤ 59,
startTime < finishTime.

[output] array.integer

Array ith element of which contains the number of occurrences of digit i on the clock during the period from startTime to finishTime inclusive.


unluckyEmployees

Your company has fallen on hard times, and you have to let some of your employees go. You figure it will be easier to fire an entire department all at once, so now you want to determine which department it's going to be.

Information about your employees and departments is stored in two tables, Employee and Department, respectively. Here are their structures:

Department:
id: unique department id
name: department name
Employee:
id: unique employee id
full_name: employee's full name
department: foreign key referencing Department.id
salary: employee's salary
To choose the unfortunate department, you set a number of criteria: you are willing to get rid of any department that has no more than 5 employees. Among these smaller departments, you will consider those where the total salary of all its employees is maximal. Lastly, to make a tough situation more fair, you decide to make the final choice from the remaining departments at random. Thus, you'd like to write a select statement that lists departments:

select all departments with less than 6 employees;
sort these departments by the total salary of its workers in descending order (in the case of a tie, the department with the greatest number of employees should go first; if it's still not enough to break a tie, the department with the smallest id should go first);
cross out the departments at the even rows and leave only those in the odd positions, to consider them more thoroughly afterwards.
Given tables Employee and Department, write the needed select statement. The output should have columns dep_name, emp_number and total_salary and be sorted as described above.

Example

For the following tables Department

id	name
1	IT
2	HR
3	Sales
and Employee

id	full_name	salary	department
1	James Smith	20	1
2	John Johnson	13	1
3	Robert Jones	15	1
4	Michael Williams	15	1
5	Mary Troppins	17	1
8	Penny Old	14	2
9	Richard Young	17	2
10	Drew Rich	50	3
the output should be

dep_name	emp_number	total_salary
IT	5	80
HR	2	31
All three departments have 5 or fewer employees, so they are all candidates to be fired. When sorted in descending order by total_salary, the Sales department becomes the second (i.e. is located at an even row), so it's not present in the resulting table.